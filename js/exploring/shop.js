/* ===========================
    INVENTORY / ITEMS / EQUIP
=========================== */
/* --- Shop items (base) --- */
const SHOP_ITEMS = [
    { id: 'swd_iron', name: 'Ki·∫øm S·∫Øt', type: 'weapon', atk: 12, hp: 0, def: 0, cost: 80 },
    { id: 'swd_storm', name: 'Ki·∫øm L√¥i ƒê√¨nh', type: 'weapon', atk: 210, hp: 40, def: 0, cost: 1800 },
    { id: 'blade_void', name: 'ƒêo·∫£n ƒêao H∆∞ Kh√¥ng', type: 'weapon', atk: 320, hp: 0, def: 35, cost: 3400 },
    { id: 'arm_basic', name: 'Gi√°p C∆° B·∫£n', type: 'armor', atk: 0, hp: 70, def: 12, cost: 120 },
    { id: 'arm_dragon', name: 'Long L√¢n Kh·∫£i', type: 'armor', atk: 0, hp: 520, def: 78, cost: 2200 },
    { id: 'robe_stellar', name: 'Tinh H√† ƒê·∫°o B√†o', type: 'armor', atk: 45, hp: 420, def: 55, cost: 3600 },
    { id: 'elixir_small', name: 'ƒêan H·ªìi Ph·ª•c Ti·ªÉu', type: 'consumable', heal: 120, cost: 60 },
    { id: 'elixir_royal', name: 'ƒêan Long Huy·∫øt', type: 'consumable', heal: 680, cost: 420 },
    { id: 'jade_cult', name: 'Ng·ªçc B·ªôi T·ª• Linh', type: 'xp', value: 900, cost: 260 },
    { id: 'jade_sun', name: 'Th√°i D∆∞∆°ng Kim Ng·ªçc', type: 'xp', value: 2800, cost: 980 },
    { id: 'pill_power', name: 'L·ª±c C·ªët ƒêan', type: 'power', value: 45, cost: 320 },
    { id: 'pill_barrier', name: 'Huy·ªÅn Gi√°p ƒêan', type: 'defense', value: 55, cost: 340 },
    { id: 'nectar_life', name: 'Ti√™n T·ªßy Sinh M·ªánh', type: 'life', value: 220, cost: 560 },
    { id: 'scroll_fortune', name: 'Tr·ª•c Th∆∞ TƒÉng V·∫≠n', type: 'luck', value: 0.06, cost: 720, desc: 'TƒÉng kh√≠ v·∫≠n l√¢u d√†i' }
];

function addItemToInventory(it) {
    state.inventory.push(it);
    renderAll();
    log(`Nh·∫≠n v·∫≠t Ph·∫©m: ${it.name}`);
}

function useItem(index) {
    const it = state.inventory[index];
    if (!it) return;
    if (it.type === 'xp') { gainXP(Math.floor(it.value * (1 + state.realmIndex * 0.2))); log(`D√πng ${it.name}, tƒÉng tu vi.`); }
    if (it.type === 'xp') {
        gainXP(Math.floor(it.value * (1 + state.realmIndex * 0.2)));
        log(`üìò D√πng ${it.name}, tƒÉng tu vi.`);
    }

    else if (it.type === 'power') {
        state.power += it.value;
        log(`üí™ D√πng ${it.name}, s·ª©c m·∫°nh +${it.value}.`);
    }

    else if (it.type === 'life') {
        state.maxAge += it.value;
        log(`ü©∏ D√πng ${it.name}, tu·ªïi th·ªç +${it.value}.`);
    }
    else if (it.type === 'luck') {
        state.luckBonus = (state.luckBonus || 0) + it.value;
        log(`üçÄ D√πng ${it.name}, kh√≠ v·∫≠n +${(it.value * 100).toFixed(1)}%.`);
    }
    else if (it.type === 'defense') {
        state.defense += it.value;
        log(`üõ°Ô∏è D√πng ${it.name}, ph√≤ng th·ªß vƒ©nh vi·ªÖn +${it.value}.`);
    }

    else if (it.type === 'consumable' && it.heal) {
        state.hp = Math.min(state.maxHp, state.hp + it.heal);
        log(`üß™ D√πng ${it.name}, h·ªìi ${it.heal} HP.`);
    }

    else if (it.type === 'weapon') {
        it.equipped = !it.equipped;
        log(`${it.name} ${it.equipped ? 'ƒë√£ trang b·ªã' : 'ƒë√£ th√°o'}`);
    }

    else if (it.type === 'armor') {
        it.equipped = !it.equipped;
        log(`${it.name} ${it.equipped ? 'ƒë√£ m·∫∑c' : 'ƒë√£ th√°o'}`);
    }

    else if (it.type === 'root_frag') {
        const same = state.inventory.filter(
            x => x.type === 'root_frag' &&
                x.value.elements[0] === it.value.elements[0] &&
                x.value.rank === it.value.rank
        );

        if (same.length >= 3) {
            let removed = 0;
            for (let i = state.inventory.length - 1; i >= 0 && removed < 3; i--) {
                const e = state.inventory[i];
                if (e.type === 'root_frag' &&
                    e.value.elements[0] === it.value.elements[0] &&
                    e.value.rank === it.value.rank) {
                    state.inventory.splice(i, 1);
                    removed++;
                }
            }

            const newRoot = {
                name: `${it.value.elements[0]} Linh CƒÉn (${ROOT_RANKS[it.value.rank]})`,
                type: 'root',
                elements: [it.value.elements[0]],
                rank: it.value.rank,
                desc: `Linh cƒÉn ho√†n ch·ªânh c·ªßa h·ªá ${it.value.elements[0]}, ph·∫©m ch·∫•t ${ROOT_RANKS[it.value.rank]}.`,
                combinable: true // c√≥ th·ªÉ h·ª£p th√†nh h·ªón nguy√™n
            };

            state.inventory.push(newRoot);
            log(`üåà H·ª£p th√†nh linh cƒÉn ${newRoot.name}! (ƒë√£ th√™m v√†o t√∫i ƒë·ªì)`);
        } else {
            log('ü™∂ C·∫ßn th√™m m·∫£nh ƒë·ªÉ h·ª£p th√†nh linh cƒÉn (c·∫ßn 3 m·∫£nh).');
        }
    }
    else if (it.type === 'root') {
        const isHybrid = it.elements.length > 1;
        state.root = {
            elements: it.elements.slice(0),
            rank: it.rank,
            isHybrid: isHybrid
        };
        log(`üåà Linh cƒÉn ƒë·ªïi th√†nh ${it.name}${isHybrid ? ' ‚Äî H·ªón Nguy√™n kh·ªüi ƒë·ªông!' : ''}`);
        state.inventory.splice(index, 1);
        renderAll();
        return;
    }

    // consume non-equipment items
    if (it.type !== 'weapon' && it.type !== 'armor' && it.type !== 'root_frag' && it.type !== 'root') state.inventory.splice(index, 1);
    renderAll();
}

let rootCombineSelection = []; // c√°c linh cƒÉn ƒëang ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ h·ª£p

function toggleRootSelection(index) {
    const it = state.inventory[index];
    if (it.type !== 'root') return;

    const pos = rootCombineSelection.indexOf(index);
    if (pos >= 0) rootCombineSelection.splice(pos, 1);
    else rootCombineSelection.push(index);

    renderInventory();
}

function confirmRootCombination() {
    if (rootCombineSelection.length < 3) {
        log('üåø C·∫ßn ch·ªçn √≠t nh·∫•t 3 linh cƒÉn ƒë·ªÉ h·ª£p th√†nh H·ªón Nguy√™n Tam Linh.');
        return;
    }

    // Ki·ªÉm tra ph·∫©m ch·∫•t ƒë·ªìng nh·∫•t
    const roots = rootCombineSelection.map(i => state.inventory[i]);
    const sameRank = roots.every(r => r.rank === roots[0].rank);
    if (!sameRank) {
        log('‚ö†Ô∏è Ph·∫©m ch·∫•t linh cƒÉn kh√¥ng ƒë·ªìng nh·∫•t, kh√¥ng th·ªÉ h·ª£p.');
        return;
    }

    // Sinh h·ªón nguy√™n cƒÉn
    const elements = [...new Set(roots.flatMap(r => r.elements))];
    const rank = roots[0].rank;

    const hybrid = {
        name: `H·ªón Nguy√™n Linh CƒÉn (${elements.join(' + ')})`,
        type: 'root',
        elements: elements,
        rank: rank,
        desc: `Linh cƒÉn h·ª£p th·ªÉ ${elements.length} h·ªá (${ROOT_RANKS[rank]}), c√≥ th·ªÉ k√≠ch ho·∫°t.`,
        isHybrid: true
    };

    // X√≥a c√°c linh cƒÉn c≈©
    rootCombineSelection.sort((a, b) => b - a).forEach(i => state.inventory.splice(i, 1));
    rootCombineSelection = [];

    // Th√™m h·ªón nguy√™n cƒÉn m·ªõi
    state.inventory.push(hybrid);
    log(`üåå H·ª£p th√†nh ${hybrid.name}! Linh cƒÉn h·ª£p th·ªÉ ${elements.length} h·ªá ƒë√£ sinh.`);
    renderInventory();
}


function discardItem(index) {
    const it = state.inventory[index];
    if (!it) return;
    if (confirm(`Ng√†i c√≥ ch·∫Øc mu·ªën v·ª©t b·ªè v·∫≠t Ph·∫©m "${it.name}" kh√¥ng?`)) {
        state.inventory.splice(index, 1);
        log(`üóëÔ∏è V·ª©t b·ªè ${it.name}.`);
        renderAll();
    }
}


/* ===========================
   SHOP
   - price scaled by realm
   =========================== */


/* modal helpers */
function ensureShopModal() {
    if (document.getElementById('shopModal')) return;
    const modal = document.createElement('div');
    modal.id = 'shopModal';
    modal.style.cssText = 'position:fixed;inset:0;background:rgba(0,0,0,0.7);display:none;align-items:center;justify-content:center;z-index:9999;';
    modal.innerHTML = `
        <div style="background:#0f1724;border-radius:12px;max-width:620px;width:90%;padding:18px;box-shadow:0 10px 40px rgba(0,0,0,0.6);">
            <div style="display:flex;justify-content:space-between;align-items:center;">
                <div style="color:#a6ffd1;font-weight:600;">ƒêa B·∫£o ƒê·∫°o Nh√¢n: ‚Äúƒê·∫°o h·ªØu gh√© xem linh b·∫£o ta d√†y c√¥ng s∆∞u t·∫ßm n√†o.‚Äù</div>
                <button id="closeShopBtn" style="border:0;background:transparent;color:#f87171;font-size:20px;cursor:pointer;">‚úï</button>
            </div>
            <div id="shopModalList" style="margin-top:14px;max-height:420px;overflow:auto;"></div>
        </div>
    `;
    document.body.appendChild(modal);
    document.getElementById('closeShopBtn').onclick = () => toggleShopModal(false);
}

function toggleShopModal(show) {
    const modal = document.getElementById('shopModal');
    if (!modal) return;
    modal.style.display = show ? 'flex' : 'none';
    if (show) renderShop();
}

function openShopModal() {
    ensureShopModal();
    toggleShopModal(true);
}

if (typeof window !== 'undefined') window.openShopModal = openShopModal;

function buyItem(id) {
    const si = (window.RENDERED_SHOP_LIST || []).find(x => x.id === id);
    if (!si) {
        log('Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m trong shop hi·ªán t·∫°i.');
        return;
    }

    const price = si.price;
    if (state.gold < price) {
        log(`Kh√¥ng ƒë·ªß v√†ng (${price}).`);
        return;
    }

    state.gold -= price;

    const obj = {
        name: si.name,
        type: si.type,
        desc: 'Mua t·∫°i c·ª≠a h√†ng',
        atk: si.atk,
        def: si.def,
        hp: si.hp,
        heal: si.heal,
        value: si.value,
        effect: si.effect,
        uses: si.uses
    };

    addItemToInventory(obj);
    log(`üõí Mua th√†nh c√¥ng: ${si.name} ‚Äî Gi√° ${price.toLocaleString()} v√†ng.`);
}

window.RENDERED_SHOP_LIST = [];
function renderShop() {
    ensureShopModal();
    const listEl = document.getElementById('shopModalList');
    if (!listEl) return;
    listEl.innerHTML = '';
    window.RENDERED_SHOP_LIST = [];
    SHOP_ITEMS.forEach(si => {
        const realmAtkMul = Math.pow(1.5, state.realmIndex);
        const realmDefMul = Math.pow(1.45, state.realmIndex);
        const realmHpMul = Math.pow(1.5, state.realmIndex);
        const realmHealMul = Math.pow(1.25, state.realmIndex);
        const realmValueMul = Math.pow(1.35, state.realmIndex);

        const priceBoost = Math.pow(1.35, state.realmIndex) * (1 + state.realmIndex * 0.08);
        const price = Math.floor(si.cost * priceBoost);

        const enhanced = { ...si, price };

        if (si.type === 'weapon') {
            enhanced.atk = Math.floor((si.atk || 0) * realmAtkMul + state.realmIndex * 18);
            enhanced.hp = si.hp || 0;
        } else if (si.type === 'armor') {
            enhanced.hp = Math.floor((si.hp || 0) * realmHpMul + state.realmIndex * 110);
            enhanced.def = Math.floor((si.def || 0) * realmDefMul + state.realmIndex * 16);
            enhanced.atk = si.atk || 0;
        } else if (si.type === 'consumable') {
            enhanced.heal = Math.floor((si.heal || 0) * realmHealMul);
        } else if (si.type === 'luck') {
            enhanced.value = parseFloat((si.value + state.realmIndex * 0.015).toFixed(3));
        } else if (['xp', 'power', 'defense', 'life'].includes(si.type)) {
            enhanced.value = Math.floor((si.value || 0) * realmValueMul);
        }

        window.RENDERED_SHOP_LIST.push(enhanced);

        const desc = (() => {
            switch (si.type) {
                case 'weapon':
                    return `ATK +${enhanced.atk}${enhanced.hp ? `, HP +${enhanced.hp}` : ''}`;
                case 'armor':
                    return `HP +${enhanced.hp}, DEF +${enhanced.def}${enhanced.atk ? `, ATK +${enhanced.atk}` : ''}`;
                case 'consumable':
                    return `H·ªìi HP ${enhanced.heal}`;
                case 'xp':
                    return `TƒÉng tu vi +${enhanced.value}`;
                case 'power':
                    return `S·ª©c m·∫°nh +${enhanced.value}`;
                case 'defense':
                    return `Ph√≤ng th·ªß +${enhanced.value}`;
                case 'life':
                    return `Tu·ªïi th·ªç +${enhanced.value}`;
                case 'luck':
                    return `May m·∫Øn +${(enhanced.value * 100).toFixed(1)}%`;
                default:
                    return si.desc || 'V·∫≠t ph·∫©m ƒë·∫∑c bi·ªát';
            }
        })();

        const row = document.createElement('div');
        row.className = 'shop-item';
        row.style.cssText = 'display:flex;justify-content:space-between;align-items:center;padding:10px 12px;margin-bottom:10px;border-radius:8px;background:rgba(255,255,255,0.05);';
        row.innerHTML = `
            <div>
                <div style="font-weight:600;color:#a6ffd1;">${si.name}</div>
                <div class="small" style="margin-top:4px;">${desc}</div>
            </div>
            <div style="text-align:right;">
                <div class="small" style="color:#ffd166;">${price.toLocaleString()} v√†ng</div>
                <button onclick="buyItem('${si.id}')" style="margin-top:6px;">Mua</button>
            </div>
        `;
        listEl.appendChild(row);
    });
}

// Guard useItem during battle
if (typeof window.useItem === 'function') {
	const __oldUseItem = window.useItem;
	window.useItem = function(item) {
		if (window._battleActive || (typeof isBattleLocked === 'function' && isBattleLocked())) {
			log('üîí ƒêang chi·∫øn ƒë·∫•u ‚Äî kh√¥ng th·ªÉ d√πng v·∫≠t ph·∫©m.');
			return;
		}
		return __oldUseItem(item);
	};
}

// Optionally guard buy/equip if they exist
if (typeof window.buyItem === 'function') {
	const __oldBuyItem = window.buyItem;
	window.buyItem = function(id) {
		if (window._battleActive || (typeof isBattleLocked === 'function' && isBattleLocked())) {
			log('üîí ƒêang chi·∫øn ƒë·∫•u ‚Äî kh√¥ng th·ªÉ mua s·∫Øm.');
			return;
		}
		return __oldBuyItem(id);
	};
}